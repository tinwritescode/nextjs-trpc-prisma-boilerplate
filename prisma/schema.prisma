// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Account {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?  @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.String
  session_state            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wallet        Wallet?
  Notification  Notification[]
  Log           Log[]
  Inventory     Inventory?
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  network   String   @default("solana")
  address   String
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  message   String
  type      NotificationType @default(UNKNOWN)
}

enum NotificationType {
  UNKNOWN
  MERGE_PROPOSAL
  MERGE_ACCEPTED
  MERGE_REJECTED
  HARVEST
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  type      LogType  @default(UNKNOWN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  UNKNOWN
  MERGE_PROPOSAL
  MERGE_ACCEPTED
  MERGE_REJECTED
  HARVEST
}

enum InventoryType {
  EGG
  FOOD
  WATER
  MEDICINE
}

model Inventory {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      InventoryType @default(EGG)
  quantity  Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
