// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  // provider = "mysql"
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator nexusPrisma {
//   provider = "nexus-prisma"
// }

enum Role {
  USER
  CLIENT
  EMPLOYEE
  ADMIN
  SUPERADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wallets       Wallet[]
  notifications Notification[]
  accounts      Account[]
  sessions      Session[]
  logs          Log[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wallet {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  network   String   @default("solana")
  address   String
}

model Notification {
  id        String           @id @default(cuid()) @map("_id")
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  message   String
  type      NotificationType @default(UNKNOWN)
}

enum NotificationType {
  UNKNOWN
  TIMEOUT_TASK
}

model Log {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  type      LogType  @default(UNKNOWN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  UNKNOWN
  SHOP_BUY
}
